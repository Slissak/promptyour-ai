/**
 * Build-time script to generate TypeScript config from YAML files
 * Reads themes, audiences, and response styles from backend config and creates a TS file
 */

const fs = require('fs');
const path = require('path');
const yaml = require('yaml');

// Paths
const CONFIG_DIR = path.resolve(__dirname, '../../../config');
const OUTPUT_FILE = path.resolve(__dirname, '../src/config/generated-options.ts');

console.log('üî® Generating config from YAML files...');

try {
  // Read YAML files
  const themesYaml = fs.readFileSync(path.join(CONFIG_DIR, 'themes.yaml'), 'utf8');
  const audiencesYaml = fs.readFileSync(path.join(CONFIG_DIR, 'audiences.yaml'), 'utf8');
  const stylesYaml = fs.readFileSync(path.join(CONFIG_DIR, 'response_styles.yaml'), 'utf8');

  // Parse YAML
  const themesData = yaml.parse(themesYaml);
  const audiencesData = yaml.parse(audiencesYaml);
  const stylesData = yaml.parse(stylesYaml);

  // Extract IDs
  const themes = themesData.themes.map(t => t.id);
  const audiences = audiencesData.audiences.map(a => a.id);
  const responseStyles = stylesData.response_styles.map(s => s.id);

  // Generate TypeScript file content
  const tsContent = `/**
 * Auto-generated configuration options
 * DO NOT EDIT THIS FILE MANUALLY
 *
 * Generated from YAML config files at build time
 * To modify, edit the YAML files in /config directory and rebuild
 *
 * Generated at: ${new Date().toISOString()}
 */

export const THEMES = ${JSON.stringify(themes, null, 2)} as const;

export const AUDIENCES = ${JSON.stringify(audiences, null, 2)} as const;

export const RESPONSE_STYLES = ${JSON.stringify(responseStyles, null, 2)} as const;

export type Theme = typeof THEMES[number];
export type Audience = typeof AUDIENCES[number];
export type ResponseStyle = typeof RESPONSE_STYLES[number];
`;

  // Ensure output directory exists
  const outputDir = path.dirname(OUTPUT_FILE);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Write file
  fs.writeFileSync(OUTPUT_FILE, tsContent, 'utf8');

  console.log('‚úÖ Config generated successfully!');
  console.log(`   Themes: ${themes.length}`);
  console.log(`   Audiences: ${audiences.length}`);
  console.log(`   Response Styles: ${responseStyles.length}`);
  console.log(`   Output: ${OUTPUT_FILE}`);

} catch (error) {
  console.error('‚ùå Failed to generate config:', error.message);
  process.exit(1);
}
